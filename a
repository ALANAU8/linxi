<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>靈曦 - 你的學習星系 | AI個人化學習平台</title>
    <meta name="description" content="點亮你的知識宇宙，探索專屬的學習軌跡。靈曦是創新的AI學習平台，提供個人化學習路徑、智慧導航和24/7學習陪伴。" />
    <meta name="keywords" content="AI學習,個人化教育,智慧學習,線上學習平台,學習助手,DSE考試,香港中學文憑考試,XR學習,生物星球" />
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    
    <!-- Icons -->
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.1.0/fonts/remixicon.css" rel="stylesheet">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    
    <!-- Three.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>
    
    <!-- Supabase JS -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <!-- PDF.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
    
    <style>
        :root {
            --primary: #0f1c3f;
            --secondary: #1a2b5f;
            --accent: #5d3fd3;
            --accent-light: #8a6eff;
            --text: #e6e6ff;
            --text-secondary: #a0a0c0;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #dc3545;
            --bio-color: #00cc66;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: var(--primary);
            color: var(--text);
            overflow-x: hidden;
        }
        
        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .star {
            position: absolute;
            background-color: white;
            border-radius: 50%;
            animation: twinkle 5s infinite;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 1; }
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        header {
            padding: 20px 0;
            position: sticky;
            top: 0;
            background-color: rgba(15, 28, 63, 0.9);
            backdrop-filter: blur(10px);
            z-index: 100;
            border-bottom: 1px solid rgba(93, 63, 211, 0.3);
        }
        
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(90deg, #8a6eff, #5d3fd3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .nav-links {
            display: flex;
            gap: 30px;
        }
        
        .nav-links a {
            color: var(--text);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
        }
        
        .nav-links a:hover {
            color: var(--accent-light);
        }
        
        .auth-buttons {
            display: flex;
            gap: 15px;
        }
        
        .btn {
            padding: 10px 20px;
            border-radius: 30px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
        }
        
        .btn-outline {
            background: transparent;
            border: 2px solid var(--accent);
            color: var(--accent-light);
        }
        
        .btn-outline:hover {
            background: var(--accent);
            color: white;
        }
        
        .btn-primary {
            background: linear-gradient(90deg, var(--accent), var(--accent-light));
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(93, 63, 211, 0.4);
        }
        
        .btn-bio {
            background: linear-gradient(90deg, var(--bio-color), #00ff88);
            color: white;
        }
        
        .btn-bio:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 204, 102, 0.4);
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--accent), var(--accent-light));
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }
        
        /* 模態框樣式 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s;
        }
        
        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal {
            background: var(--secondary);
            border-radius: 15px;
            width: 90%;
            max-width: 450px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            transform: translateY(20px);
            transition: transform 0.3s;
            border: 1px solid rgba(93, 63, 211, 0.3);
        }
        
        .modal-overlay.active .modal {
            transform: translateY(0);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-secondary);
            cursor: pointer;
            transition: color 0.3s;
        }
        
        .close-modal:hover {
            color: var(--text);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            background: rgba(15, 28, 63, 0.7);
            border: 1px solid rgba(93, 63, 211, 0.3);
            color: var(--text);
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--accent);
        }
        
        .form-footer {
            margin-top: 20px;
            text-align: center;
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        .form-footer a {
            color: var(--accent-light);
            text-decoration: none;
            cursor: pointer;
        }
        
        .form-footer a:hover {
            text-decoration: underline;
        }
        
        .error-message {
            color: var(--danger);
            font-size: 0.9rem;
            margin-top: 5px;
            display: none;
        }
        
        .success-message {
            color: var(--success);
            font-size: 0.9rem;
            margin-top: 5px;
            display: none;
        }
        
        .hero {
            padding: 100px 0;
            text-align: center;
        }
        
        .hero h1 {
            font-size: 3.5rem;
            margin-bottom: 20px;
            background: linear-gradient(90deg, #ffffff, var(--accent-light));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            line-height: 1.2;
        }
        
        .hero p {
            font-size: 1.2rem;
            max-width: 700px;
            margin: 0 auto 40px;
            color: var(--text-secondary);
            line-height: 1.6;
        }
        
        .hero-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 40px;
        }
        
        .section-title {
            font-size: 2.5rem;
            margin-bottom: 60px;
            text-align: center;
            position: relative;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 3px;
            background: linear-gradient(90deg, var(--accent), var(--accent-light));
            border-radius: 3px;
        }
        
        .features {
            padding: 80px 0;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }
        
        .feature-card {
            background: rgba(26, 43, 95, 0.5);
            border-radius: 15px;
            padding: 30px;
            transition: all 0.3s;
            border: 1px solid rgba(93, 63, 211, 0.2);
        }
        
        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 30px rgba(93, 63, 211, 0.2);
            border-color: var(--accent);
        }
        
        .feature-icon {
            font-size: 40px;
            margin-bottom: 20px;
            color: var(--accent-light);
        }
        
        .feature-card h3 {
            font-size: 1.5rem;
            margin-bottom: 15px;
        }
        
        .feature-card p {
            color: var(--text-secondary);
            line-height: 1.6;
        }
        
        /* 星際導航員專用樣式 */
        .navigator-section {
            padding: 80px 0;
            background: rgba(15, 28, 63, 0.5);
            border-radius: 20px;
            margin: 40px 0;
        }
        
        .navigator-container {
            max-width: 1000px;
            margin: 0 auto;
        }
        
        .navigator-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 40px;
            position: relative;
        }
        
        .navigator-steps::before {
            content: '';
            position: absolute;
            top: 25px;
            left: 0;
            right: 0;
            height: 3px;
            background: rgba(93, 63, 211, 0.3);
            z-index: 1;
        }
        
        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
        }
        
        .step-circle {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(26, 43, 95, 0.8);
            border: 3px solid rgba(93, 63, 211, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            font-weight: bold;
            transition: all 0.3s;
        }
        
        .step.active .step-circle {
            background: var(--accent);
            border-color: var(--accent-light);
            box-shadow: 0 0 15px rgba(93, 63, 211, 0.5);
        }
        
        .step-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        .step.active .step-label {
            color: var(--accent-light);
            font-weight: 600;
        }
        
        .navigator-content {
            background: rgba(26, 43, 95, 0.5);
            border-radius: 15px;
            padding: 30px;
            border: 1px solid rgba(93, 63, 211, 0.2);
            min-height: 400px;
        }
        
        .step-content {
            display: none;
        }
        
        .step-content.active {
            display: block;
        }
        
        .step-title {
            font-size: 1.8rem;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            background: rgba(15, 28, 63, 0.7);
            border: 1px solid rgba(93, 63, 211, 0.3);
            color: var(--text);
            font-size: 1rem;
        }
        
        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 10px;
        }
        
        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .checkbox-item input {
            width: 18px;
            height: 18px;
        }
        
        .navigator-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }
        
        .learning-path {
            background: rgba(15, 28, 63, 0.7);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .path-item {
            display: flex;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid rgba(93, 63, 211, 0.2);
        }
        
        .path-item:last-child {
            border-bottom: none;
        }
        
        .path-icon {
            font-size: 24px;
            margin-right: 15px;
        }
        
        .path-content {
            flex: 1;
        }
        
        .path-title {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .path-desc {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        .path-details {
            margin-top: 10px;
            padding: 10px;
            background: rgba(93, 63, 211, 0.1);
            border-radius: 5px;
            font-size: 0.85rem;
        }
        
        .path-resources {
            margin-top: 10px;
        }
        
        .resource-link {
            display: inline-block;
            padding: 5px 10px;
            background: rgba(138, 110, 255, 0.2);
            border-radius: 4px;
            margin-right: 10px;
            margin-bottom: 5px;
            font-size: 0.8rem;
            color: var(--accent-light);
            text-decoration: none;
            transition: all 0.3s;
        }
        
        .resource-link:hover {
            background: rgba(138, 110, 255, 0.4);
        }
        
        .path-status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .status-pending {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
        }
        
        .status-completed {
            background: rgba(40, 167, 69, 0.2);
            color: #28a745;
        }
        
        .status-current {
            background: rgba(0, 123, 255, 0.2);
            color: #007bff;
        }
        
        .ai-analysis {
            background: rgba(93, 63, 211, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid var(--accent);
        }
        
        .ai-analysis h4 {
            margin-bottom: 10px;
            color: var(--accent-light);
        }
        
        .ai-analysis p {
            color: var(--text-secondary);
            line-height: 1.6;
        }
        
        .ai-assistant {
            padding: 80px 0;
            text-align: center;
        }
        
        .ai-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(26, 43, 95, 0.5);
            border-radius: 15px;
            padding: 30px;
            border: 1px solid rgba(93, 63, 211, 0.2);
        }
        
        .personality-selector {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .personality-btn {
            padding: 10px 20px;
            border-radius: 30px;
            background: transparent;
            border: 2px solid var(--accent);
            color: var(--text);
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .personality-btn.active {
            background: var(--accent);
            color: white;
        }
        
        .chat-container {
            background: rgba(15, 28, 63, 0.7);
            border-radius: 10px;
            height: 300px;
            overflow-y: auto;
            padding: 20px;
            margin-bottom: 20px;
            text-align: left;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .ai-message {
            background: rgba(93, 63, 211, 0.3);
            border-left: 3px solid var(--accent);
        }
        
        .user-message {
            background: rgba(26, 43, 95, 0.5);
            margin-left: auto;
            border-right: 3px solid var(--accent-light);
        }
        
        .chat-input {
            display: flex;
            gap: 10px;
        }
        
        .chat-input input {
            flex: 1;
            padding: 12px 15px;
            border-radius: 30px;
            background: rgba(15, 28, 63, 0.7);
            border: 1px solid rgba(93, 63, 211, 0.3);
            color: var(--text);
        }
        
        .chat-input button {
            padding: 12px 25px;
            border-radius: 30px;
            background: var(--accent);
            color: white;
            border: none;
            cursor: pointer;
        }
        
        .community {
            padding: 80px 0;
        }
        
        .community-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }
        
        .community-card {
            background: rgba(26, 43, 95, 0.5);
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            transition: all 0.3s;
            border: 1px solid rgba(93, 63, 211, 0.2);
        }
        
        .community-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 30px rgba(93, 63, 211, 0.2);
            border-color: var(--accent);
        }
        
        .community-icon {
            font-size: 50px;
            margin-bottom: 20px;
            color: var(--accent-light);
        }
        
        footer {
            padding: 60px 0 30px;
            background: rgba(15, 28, 63, 0.9);
            border-top: 1px solid rgba(93, 63, 211, 0.3);
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 40px;
            margin-bottom: 40px;
        }
        
        .footer-column h3 {
            font-size: 1.2rem;
            margin-bottom: 20px;
            color: var(--accent-light);
        }
        
        .footer-column ul {
            list-style: none;
        }
        
        .footer-column ul li {
            margin-bottom: 10px;
        }
        
        .footer-column ul li a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .footer-column ul li a:hover {
            color: var(--accent-light);
        }
        
        .copyright {
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid rgba(93, 63, 211, 0.2);
            color: var(--text-secondary);
        }
        
        /* PDF上傳區域樣式 */
        .pdf-upload-container {
            background: rgba(15, 28, 63, 0.7);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            border: 2px dashed rgba(93, 63, 211, 0.5);
        }
        
        .pdf-upload-area {
            text-align: center;
            padding: 30px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .pdf-upload-area:hover {
            background: rgba(93, 63, 211, 0.1);
        }
        
        .pdf-upload-icon {
            font-size: 40px;
            margin-bottom: 15px;
            color: var(--accent-light);
        }
        
        .pdf-upload-text {
            margin-bottom: 15px;
            color: var(--text-secondary);
        }
        
        .pdf-upload-btn {
            display: inline-block;
            padding: 10px 20px;
            background: var(--accent);
            color: white;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .pdf-upload-btn:hover {
            background: var(--accent-light);
        }
        
        .pdf-preview {
            margin-top: 20px;
            display: none;
        }
        
        .pdf-preview-info {
            background: rgba(26, 43, 95, 0.5);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }
        
        .pdf-summary {
            background: rgba(93, 63, 211, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid var(--accent);
        }
        
        .pdf-summary h4 {
            margin-bottom: 10px;
            color: var(--accent-light);
        }
        
        .pdf-summary-content {
            color: var(--text-secondary);
            line-height: 1.6;
        }
        
        .uploaded-pdf-list {
            margin-top: 20px;
        }
        
        .pdf-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            background: rgba(15, 28, 63, 0.7);
            border-radius: 8px;
            margin-bottom: 10px;
        }
        
        .pdf-item-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .pdf-item-name {
            font-weight: 500;
        }
        
        .pdf-item-actions {
            display: flex;
            gap: 10px;
        }
        
        .action-btn {
            padding: 5px 10px;
            background: rgba(93, 63, 211, 0.2);
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s;
        }
        
        .action-btn:hover {
            background: rgba(93, 63, 211, 0.4);
        }
        
        /* 生物星球專用樣式 */
        .bio-planet-section {
            padding: 80px 0;
            background: rgba(0, 51, 34, 0.2);
            border-radius: 20px;
            margin: 40px 0;
        }
        
        .bio-planet-header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .bio-planet-title {
            font-size: 2.5rem;
            margin-bottom: 20px;
            color: var(--bio-color);
        }
        
        .bio-planet-subtitle {
            font-size: 1.2rem;
            color: var(--text-secondary);
            max-width: 700px;
            margin: 0 auto;
        }
        
        .bio-features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .bio-feature {
            background: rgba(0, 51, 34, 0.3);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            border: 1px solid rgba(0, 204, 102, 0.3);
            transition: all 0.3s;
        }
        
        .bio-feature:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 204, 102, 0.2);
            border-color: var(--bio-color);
        }
        
        .bio-feature-icon {
            font-size: 40px;
            margin-bottom: 15px;
            color: var(--bio-color);
        }
        
        .bio-feature h3 {
            font-size: 1.3rem;
            margin-bottom: 10px;
        }
        
        .bio-feature p {
            color: var(--text-secondary);
            font-size: 0.95rem;
        }
        
        .xr-experience {
            background: rgba(26, 43, 95, 0.5);
            border-radius: 15px;
            padding: 30px;
            margin-top: 40px;
            border: 1px solid rgba(93, 63, 211, 0.2);
        }
        
        .xr-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .xr-title {
            font-size: 1.8rem;
            margin-bottom: 10px;
            color: var(--accent-light);
        }
        
        .xr-description {
            color: var(--text-secondary);
            max-width: 600px;
            margin: 0 auto;
        }
        
        .xr-options {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .xr-option {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            padding: 20px;
            background: rgba(15, 28, 63, 0.7);
            border-radius: 10px;
            width: 150px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .xr-option:hover {
            background: rgba(93, 63, 211, 0.2);
            transform: translateY(-5px);
        }
        
        .xr-option.active {
            background: rgba(93, 63, 211, 0.3);
            border: 2px solid var(--accent-light);
        }
        
        .xr-option-icon {
            font-size: 40px;
        }
        
        .xr-option-text {
            font-weight: 600;
        }
        
        .xr-viewer {
            width: 100%;
            height: 400px;
            background: rgba(15, 28, 63, 0.7);
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        
        .xr-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }
        
        /* 3D模型查看器 */
        .model-viewer {
            position: relative;
            width: 100%;
            height: 100%;
        }
        
        .model-info {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 8px;
            max-width: 300px;
            z-index: 10;
        }
        
        .model-info h4 {
            margin-bottom: 10px;
            color: var(--bio-color);
        }
        
        .model-info p {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        .model-controls {
            position: absolute;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 10;
        }
        
        .model-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.7);
            border: none;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .model-btn:hover {
            background: rgba(93, 63, 211, 0.7);
        }
        
        /* 打字機效果 */
        .typing-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            background-color: var(--accent-light);
            border-radius: 50%;
            margin-left: 5px;
            animation: typing 1s infinite;
        }
        
        @keyframes typing {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 1; }
        }
        
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .hero h1 {
                font-size: 2.5rem;
            }
            
            .hero-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .personality-selector {
                flex-direction: column;
                align-items: center;
            }
            
            .navigator-steps {
                flex-direction: column;
                align-items: flex-start;
                gap: 20px;
            }
            
            .navigator-steps::before {
                display: none;
            }
            
            .step {
                flex-direction: row;
                gap: 15px;
            }
            
            .xr-options {
                flex-direction: column;
                align-items: center;
            }
            
            .xr-option {
                width: 100%;
                max-width: 250px;
            }
        }
    </style>
</head>
<body>
    <!-- 星空背景 -->
    <div class="stars" id="stars"></div>
    
    <!-- 導航欄 -->
    <header>
        <div class="container">
            <nav class="navbar">
                <div class="logo">
                    <span>🌌</span>
                    <span>靈曦</span>
                </div>
                <div class="nav-links">
                    <a href="#features">核心功能</a>
                    <a href="#navigator">星際導航員</a>
                    <a href="#bio-planet">生物星球</a>
                    <a href="#ai-assistant">AI伴學精靈</a>
                    <a href="#community">星際社群</a>
                </div>
                <div class="auth-buttons" id="authButtons">
                    <!-- 登入/註冊按鈕將在這裡動態生成 -->
                </div>
            </nav>
        </div>
    </header>
    
    <!-- 註冊模態框 -->
    <div class="modal-overlay" id="registerModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">註冊靈曦帳號</h2>
                <button class="close-modal" id="closeRegisterModal">&times;</button>
            </div>
            <form id="registerForm">
                <div class="form-group">
                    <label for="registerUsername">用戶名</label>
                    <input type="text" id="registerUsername" class="form-control" placeholder="請輸入用戶名" required>
                    <div class="error-message" id="usernameError"></div>
                </div>
                <div class="form-group">
                    <label for="registerEmail">電子郵件</label>
                    <input type="email" id="registerEmail" class="form-control" placeholder="請輸入電子郵件" required>
                    <div class="error-message" id="emailError"></div>
                </div>
                <div class="form-group">
                    <label for="registerPassword">密碼</label>
                    <input type="password" id="registerPassword" class="form-control" placeholder="請輸入密碼" required>
                    <div class="error-message" id="passwordError"></div>
                </div>
                <div class="form-group">
                    <label for="registerConfirmPassword">確認密碼</label>
                    <input type="password" id="registerConfirmPassword" class="form-control" placeholder="請再次輸入密碼" required>
                    <div class="error-message" id="confirmPasswordError"></div>
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%;">註冊</button>
                <div class="success-message" id="registerSuccess">註冊成功！</div>
            </form>
            <div class="form-footer">
                已經有帳號？ <a id="showLoginForm">立即登入</a>
            </div>
        </div>
    </div>
    
    <!-- 登入模態框 -->
    <div class="modal-overlay" id="loginModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">登入靈曦</h2>
                <button class="close-modal" id="closeLoginModal">&times;</button>
            </div>
            <form id="loginForm">
                <div class="form-group">
                    <label for="loginEmail">電子郵件</label>
                    <input type="email" id="loginEmail" class="form-control" placeholder="請輸入電子郵件" required>
                    <div class="error-message" id="loginEmailError"></div>
                </div>
                <div class="form-group">
                    <label for="loginPassword">密碼</label>
                    <input type="password" id="loginPassword" class="form-control" placeholder="請輸入密碼" required>
                    <div class="error-message" id="loginPasswordError"></div>
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%;">登入</button>
                <div class="error-message" id="loginError"></div>
            </form>
            <div class="form-footer">
                還沒有帳號？ <a id="showRegisterForm">立即註冊</a>
            </div>
        </div>
    </div>
    
    <!-- 英雄區域 -->
    <section class="hero">
        <div class="container">
            <h1>點亮你的知識宇宙<br>探索專屬的學習軌跡</h1>
            <p>在AI的引導下，於知識的朦朧清晨中找到第一縷靈感之光，照亮屬於自己的知識宇宙。</p>
            <div class="hero-buttons">
                <button class="btn btn-primary" id="startNavigator">原力覺醒測驗</button>
                <button class="btn btn-bio" id="exploreBioPlanet">探索生物星球</button>
                <button class="btn btn-outline">探索星際航線</button>
            </div>
        </div>
    </section>
    
    <!-- 星際導航員 -->
    <section class="navigator-section" id="navigator">
        <div class="container">
            <h2 class="section-title">星際導航員</h2>
            <div class="navigator-container">
                <div class="navigator-steps">
                    <div class="step active" data-step="1">
                        <div class="step-circle">1</div>
                        <div class="step-label">學習風格</div>
                    </div>
                    <div class="step" data-step="2">
                        <div class="step-circle">2</div>
                        <div class="step-label">目標設定</div>
                    </div>
                    <div class="step" data-step="3">
                        <div class="step-circle">3</div>
                        <div class="step-label">興趣領域</div>
                    </div>
                    <div class="step" data-step="4">
                        <div class="step-circle">4</div>
                        <div class="step-label">學習路徑</div>
                    </div>
                </div>
                
                <div class="navigator-content">
                    <!-- 步驟1: 學習風格 -->
                    <div class="step-content active" id="step1">
                        <h3 class="step-title">探索你的學習風格</h3>
                        <p style="text-align: center; margin-bottom: 30px; color: var(--text-secondary);">了解你的學習風格有助於AI為你打造最適合的學習體驗</p>
                        
                        <div class="form-group">
                            <label>你通常如何學習新知識？</label>
                            <select class="form-control" id="learningStyle">
                                <option value="">請選擇你的學習風格</option>
                                <option value="visual">視覺型 - 透過圖表、影片和圖像學習效果最好</option>
                                <option value="auditory">聽覺型 - 透過聽講、討論和音頻學習效果最好</option>
                                <option value="kinesthetic">動覺型 - 透過動手實踐和親身體驗學習效果最好</option>
                                <option value="reading">閱讀型 - 透過閱讀文字和書籍學習效果最好</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>你的注意力集中時間通常是？</label>
                            <select class="form-control" id="attentionSpan">
                                <option value="">請選擇你的注意力集中時間</option>
                                <option value="short">短時間（15-25分鐘）</option>
                                <option value="medium">中等時間（30-45分鐘）</option>
                                <option value="long">長時間（60分鐘以上）</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>你更喜歡的學習節奏？</label>
                            <select class="form-control" id="learningPace">
                                <option value="">請選擇你的學習節奏</option>
                                <option value="slow">慢速 - 喜歡深入理解每個概念</option>
                                <option value="moderate">中等 - 平衡深度和進度</option>
                                <option value="fast">快速 - 喜歡快速掌握大綱和核心概念</option>
                            </select>
                        </div>
                        
                        <div class="navigator-actions">
                            <div></div> <!-- 空div用於對齊 -->
                            <button class="btn btn-primary" id="nextStep1">下一步</button>
                        </div>
                    </div>
                    
                    <!-- 步驟2: 目標設定 -->
                    <div class="step-content" id="step2">
                        <h3 class="step-title">設定你的學習目標</h3>
                        <p style="text-align: center; margin-bottom: 30px; color: var(--text-secondary);">明確的目標能幫助AI為你規劃最有效的學習路徑</p>
                        
                        <div class="form-group">
                            <label>你的主要學習目標是？</label>
                            <select class="form-control" id="learningGoal">
                                <option value="">請選擇你的學習目標</option>
                                <option value="academic">學業進步 - 提高學校成績或準備考試</option>
                                <option value="career">職業發展 - 學習新技能以促進職業發展</option>
                                <option value="personal">個人興趣 - 探索新領域或發展興趣愛好</option>
                                <option value="certification">專業認證 - 準備專業認證考試</option>
                                <option value="dse">DSE考試 - 準備香港中學文憑考試</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>你希望達到的學習程度？</label>
                            <select class="form-control" id="proficiencyLevel">
                                <option value="">請選擇期望的熟練程度</option>
                                <option value="basic">基礎了解 - 掌握基本概念和術語</option>
                                <option value="intermediate">中級應用 - 能夠應用知識解決問題</option>
                                <option value="advanced">高級精通 - 深入理解並能創新應用</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>你預計的學習時間投入？</label>
                            <select class="form-control" id="timeCommitment">
                                <option value="">請選擇每週預計學習時間</option>
                                <option value="light">輕度（1-5小時/週）</option>
                                <option value="moderate">中度（6-10小時/週）</option>
                                <option value="intensive">密集（11-20小時/週）</option>
                                <option value="full">全職（20+小時/週）</option>
                            </select>
                        </div>
                        
                        <div class="navigator-actions">
                            <button class="btn btn-outline" id="prevStep2">上一步</button>
                            <button class="btn btn-primary" id="nextStep2">下一步</button>
                        </div>
                    </div>
                    
                    <!-- 步驟3: 興趣領域 -->
                    <div class="step-content" id="step3">
                        <h3 class="step-title">選擇你的興趣領域</h3>
                        <p style="text-align: center; margin-bottom: 30px; color: var(--text-secondary);">選擇你感興趣的知識星球，AI將為你規劃專屬的星際航線</p>
                        
                        <div class="form-group">
                            <label>選擇你感興趣的知識領域：</label>
                            <div class="checkbox-group">
                                <div class="checkbox-item">
                                    <input type="checkbox" id="math" value="math">
                                    <label for="math">數學星球 🧮</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="physics" value="physics">
                                    <label for="physics">物理星球 🌌</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="chemistry" value="chemistry">
                                    <label for="chemistry">化學星球 ⚗️</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="programming" value="programming">
                                    <label for="programming">程式設計星球 💻</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="literature" value="literature">
                                    <label for="literature">文學星球 📚</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="history" value="history">
                                    <label for="history">歷史星球 🏛️</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="biology" value="biology">
                                    <label for="biology">生物星球 🧬</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="art" value="art">
                                    <label for="art">藝術星球 🎨</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="language" value="language">
                                    <label for="language">語言星球 🗣️</label>
                                </div>
                                <div class="checkbox-item">
                                    <input type="checkbox" id="dse" value="dse">
                                    <label for="dse">DSE考試星球 📝</label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>你是否有特定的學習主題或技能想專注於？</label>
                            <textarea class="form-control" id="specificTopics" rows="3" placeholder="例如：機器學習、文藝復興藝術、有機化學、DSE數學、DSE英文..."></textarea>
                        </div>
                        
                        <div class="navigator-actions">
                            <button class="btn btn-outline" id="prevStep3">上一步</button>
                            <button class="btn btn-primary" id="nextStep3">生成學習路徑</button>
                        </div>
                    </div>
                    
                    <!-- 步驟4: 學習路徑 -->
                    <div class="step-content" id="step4">
                        <h3 class="step-title">你的專屬星際航線</h3>
                        <p style="text-align: center; margin-bottom: 30px; color: var(--text-secondary);">AI已根據你的學習風格、目標和興趣，為你規劃了專屬的學習路徑</p>
                        
                        <div class="ai-analysis">
                            <h4>🧠 AI學習分析</h4>
                            <p id="aiAnalysisText">根據你的學習風格和目標，AI建議採用模組化學習方法，專注於核心概念的建立，並透過實踐練習強化學習效果。</p>
                        </div>
                        
                        <div class="learning-path" id="learningPath">
                            <!-- 學習路徑將由JavaScript動態生成 -->
                        </div>
                        
                        <div class="navigator-actions">
                            <button class="btn btn-outline" id="prevStep4">重新設定</button>
                            <button class="btn btn-primary" id="savePath">保存學習路徑</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- 生物星球 -->
    <section class="bio-planet-section" id="bio-planet">
        <div class="container">
            <div class="bio-planet-header">
                <h2 class="bio-planet-title">🧬 生物星球</h2>
                <p class="bio-planet-subtitle">探索生命奧秘，從微觀細胞到宏觀生態系統，透過XR技術沉浸式學習生物學</p>
            </div>
            
            <div class="bio-features">
                <div class="bio-feature">
                    <div class="bio-feature-icon">🔬</div>
                    <h3>微觀世界探索</h3>
                    <p>透過虛擬顯微鏡觀察細胞結構，了解DNA、蛋白質等生物大分子</p>
                </div>
                <div class="bio-feature">
                    <div class="bio-feature-icon">🧫</div>
                    <h3>虛擬實驗室</h3>
                    <p>在安全的虛擬環境中進行生物實驗，學習實驗技巧和科學方法</p>
                </div>
                <div class="bio-feature">
                    <div class="bio-feature-icon">🌿</div>
                    <h3>生態系統模擬</h3>
                    <p>探索不同生態系統，觀察物種互動和能量流動</p>
                </div>
                <div class="bio-feature">
                    <div class="bio-feature-icon">🧠</div>
                    <h3>人體解剖</h3>
                    <p>透過3D模型深入了解人體結構和各系統功能</p>
                </div>
            </div>
            
            <div class="xr-experience">
                <div class="xr-header">
                    <h3 class="xr-title">XR沉浸式學習體驗</h3>
                    <p class="xr-description">使用WebXR技術，在虛擬現實和增強現實中探索生物學概念</p>
                </div>
                
                <div class="xr-options">
                    <div class="xr-option active" data-mode="3d">
                        <div class="xr-option-icon">🖥️</div>
                        <div class="xr-option-text">3D模式</div>
                    </div>
                    <div class="xr-option" data-mode="vr">
                        <div class="xr-option-icon">🥽</div>
                        <div class="xr-option-text">VR模式</div>
                    </div>
                    <div class="xr-option" data-mode="ar">
                        <div class="xr-option-icon">📱</div>
                        <div class="xr-option-text">AR模式</div>
                    </div>
                </div>
                
                <div class="xr-viewer">
                    <div class="model-viewer" id="modelViewer">
                        <!-- 3D模型將在這裡渲染 -->
                    </div>
                    <div class="model-info">
                        <h4>DNA雙螺旋結構</h4>
                        <p>DNA是由兩條多核苷酸鏈組成的雙螺旋結構，是生物遺傳信息的載體。</p>
                    </div>
                    <div class="model-controls">
                        <button class="model-btn" id="rotateModel">🔄</button>
                        <button class="model-btn" id="zoomIn">➕</button>
                        <button class="model-btn" id="zoomOut">➖</button>
                        <button class="model-btn" id="resetModel">⭕</button>
                    </div>
                </div>
                
                <div class="xr-controls">
                    <button class="btn btn-bio" id="loadDNAScene">載入DNA模型</button>
                    <button class="btn btn-bio" id="loadCellScene">載入細胞模型</button>
                    <button class="btn btn-primary" id="enterVR">進入VR模式</button>
                </div>
            </div>
        </div>
    </section>
    
    <!-- 核心功能 -->
    <section class="features" id="features">
        <div class="container">
            <h2 class="section-title">探索學習星系</h2>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">🧭</div>
                    <h3>星際導航員</h3>
                    <p>AI根據你的學習風格與目標，規劃專屬的星際航線，動態調整學習路徑。</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🪐</div>
                    <h3>知識星球</h3>
                    <p>每個學科都是一顆獨特的知識星球，擁有核心概念區和實踐環帶。</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🤖</div>
                    <h3>AI伴學精靈</h3>
                    <p>可選擇性格的AI助手，24/7解答疑問，智慧總結內容，分析錯題根源。</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🌠</div>
                    <h3>星際社群</h3>
                    <p>組成探險艦隊，參與知識交易站，分享星圖筆記，共同攻占知識星球。</p>
                </div>
            </div>
        </div>
    </section>
    
    <!-- AI助手 -->
    <section class="ai-assistant" id="ai-assistant">
        <div class="container">
            <h2 class="section-title">AI伴學精靈</h2>
            <div class="ai-container">
                <div class="personality-selector">
                    <button class="personality-btn active" data-personality="encouraging">鼓勵型導師</button>
                    <button class="personality-btn" data-personality="analytical">冷靜分析型</button>
                    <button class="personality-btn" data-personality="humorous">幽默風趣型</button>
                </div>
                
                <!-- PDF上傳區域 -->
                <div class="pdf-upload-container">
                    <div class="pdf-upload-area" id="pdfUploadArea">
                        <div class="pdf-upload-icon">📄</div>
                        <div class="pdf-upload-text">上傳PDF文件，AI將為您歸納內容</div>
                        <div class="pdf-upload-btn">選擇PDF文件</div>
                        <input type="file" id="pdfFileInput" accept=".pdf" style="display: none;">
                    </div>
                    
                    <div class="pdf-preview" id="pdfPreview">
                        <div class="pdf-preview-info">
                            <div><strong>文件名：</strong><span id="pdfFileName"></span></div>
                            <div><strong>文件大小：</strong><span id="pdfFileSize"></span></div>
                            <div><strong>頁數：</strong><span id="pdfPageCount"></span></div>
                        </div>
                        
                        <div class="pdf-summary">
                            <h4>📝 AI內容歸納</h4>
                            <div class="pdf-summary-content" id="pdfSummaryContent">
                                <div class="typing-indicator"></div>
                                正在分析文檔內容...
                            </div>
                        </div>
                    </div>
                    
                    <div class="uploaded-pdf-list" id="uploadedPdfList">
                        <h4>已上傳的文檔</h4>
                        <!-- 上傳的PDF列表將在這裡動態生成 -->
                    </div>
                </div>
                
                <div class="chat-container" id="chatContainer">
                    <div class="message ai-message">
                        你好！我是你的AI伴學精靈。我可以幫助你解答學習問題、總結內容，或是陪你討論學習策略。你今天想探索哪個知識星球呢？
                    </div>
                </div>
                <div class="chat-input">
                    <input type="text" id="chatInput" placeholder="輸入你的問題或想法...">
                    <button id="sendMessageBtn">發送</button>
                </div>
            </div>
        </div>
    </section>
    
    <!-- 社群 -->
    <section class="community" id="community">
        <div class="container">
            <h2 class="section-title">星際社群</h2>
            <div class="community-grid">
                <div class="community-card">
                    <div class="community-icon">🚀</div>
                    <h3>學習公會</h3>
                    <p>基於共同目標組成探險艦隊，互相激勵，共同完成任務。</p>
                    <button class="btn btn-outline" style="margin-top: 20px;">加入公會</button>
                </div>
                <div class="community-card">
                    <div class="community-icon">🏆</div>
                    <h3>成就系統</h3>
                    <p>完成里程碑獲得專屬徽章與頭銜，收集星能解鎖特殊功能。</p>
                    <button class="btn btn-outline" style="margin-top: 20px;">查看成就</button>
                </div>
                <div class="community-card">
                    <div class="community-icon">💎</div>
                    <h3>知識交易站</h3>
                    <p>將學習筆記整理成星圖卡片，與他人交換或出售。</p>
                    <button class="btn btn-outline" style="margin-top: 20px;">探索交易站</button>
                </div>
            </div>
        </div>
    </section>
    
    <!-- 頁腳 -->
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-column">
                    <h3>靈曦</h3>
                    <p>點亮你的知識宇宙，探索專屬的學習軌跡。</p>
                </div>
                <div class="footer-column">
                    <h3>探索</h3>
                    <ul>
                        <li><a href="#">知識星球</a></li>
                        <li><a href="#bio-planet">生物星球</a></li>
                        <li><a href="#">星際航線</a></li>
                        <li><a href="#">原力測驗</a></li>
                    </ul>
                </div>
                <div class="footer-column">
                    <h3>資源</h3>
                    <ul>
                        <li><a href="#">星際指南</a></li>
                        <li><a href="#">知識庫</a></li>
                        <li><a href="#">常見問題</a></li>
                    </ul>
                </div>
                <div class="footer-column">
                    <h3>社群</h3>
                    <ul>
                        <li><a href="#">學習公會</a></li>
                        <li><a href="#">知識交易站</a></li>
                        <li><a href="#">成就榜</a></li>
                    </ul>
                </div>
            </div>
            <div class="copyright">
                <p>&copy; 2023 靈曦 - 你的學習星系。保留所有權利。</p>
            </div>
        </div>
    </footer>

    <script>
        // 初始化 Supabase
        const SUPABASE_URL = 'https://ixrakwrwobgjvbhbzgxs.supabase.co'
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml4cmFrd3J3b2JnanZiaGJ6Z3hzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA4MDgzNDQsImV4cCI6MjA3NjM4NDM0NH0.1ZG-_w230-Q6LYyBxh4lHXnqL-UFXYhS2p2gs8AHZwE'
        
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // 創建星空背景
        function createStars() {
            const starsContainer = document.getElementById('stars');
            const starCount = 150;
            
            for (let i = 0; i < starCount; i++) {
                const star = document.createElement('div');
                star.classList.add('star');
                
                const size = Math.random() * 3;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                
                star.style.left = `${Math.random() * 100}%`;
                star.style.top = `${Math.random() * 100}%`;
                
                star.style.animationDelay = `${Math.random() * 5}s`;
                
                starsContainer.appendChild(star);
            }
        }
        
        // 知識庫 - 基礎問答對
        const knowledgeBase = {
            "數學": {
                "什麼是畢達哥拉斯定理？": "畢達哥拉斯定理指出，在直角三角形中，斜邊的平方等於兩條直角邊的平方和。公式表示為：a² + b² = c²，其中c是斜邊，a和b是兩條直角邊。",
                "如何計算圓的面積？": "圓的面積計算公式是：A = πr²，其中A是面積，r是圓的半徑，π是圓周率（約等於3.14159）。",
                "什麼是導數？": "導數是微積分中的基本概念，表示函數在某一點的變化率。幾何上，它代表函數圖像在該點的切線斜率。",
                "什麼是質數？": "質數是大於1的自然數，除了1和它本身之外沒有其他正因數。例如：2、3、5、7、11等。"
            },
            "物理": {
                "牛頓三大運動定律是什麼？": "1. 慣性定律：物體在不受外力時保持靜止或勻速直線運動。\n2. F=ma：物體的加速度與作用力成正比，與質量成反比。\n3. 作用與反作用定律：每個作用力都有一個大小相等、方向相反的反作用力。",
                "什麼是能量守恆定律？": "能量守恆定律指出，在封閉系統中，能量不能被創造或消滅，只能從一種形式轉換為另一種形式。系統的總能量保持不變。",
                "如何計算速度？": "速度是位移隨時間的變化率，計算公式為：v = Δs/Δt，其中v是速度，Δs是位移變化量，Δt是時間變化量。",
                "什麼是萬有引力定律？": "萬有引力定律指出，任何兩個質點之間都存在相互吸引力，這個力與它們質量的乘積成正比，與它們距離的平方成反比。"
            },
            "生物": {
                "什麼是DNA？": "DNA（脫氧核糖核酸）是生物體中的遺傳物質，包含生物體發育和功能所需的遺傳信息。DNA由兩條多核苷酸鏈組成，形成雙螺旋結構。",
                "細胞的基本結構是什麼？": "細胞的基本結構包括細胞膜、細胞質和細胞核。細胞膜控制物質進出，細胞質是細胞內的主要液體，細胞核包含遺傳物質DNA。",
                "什麼是光合作用？": "光合作用是植物、藻類和某些細菌利用光能將二氧化碳和水轉化為有機物（如葡萄糖）和氧氣的過程。",
                "什麼是自然選擇？": "自然選擇是達爾文提出的進化機制，指環境中適應性較好的個體更有可能生存和繁殖，從而使有利性狀在種群中逐漸積累。",
                "人體的主要系統有哪些？": "人體的主要系統包括：神經系統、循環系統、呼吸系統、消化系統、內分泌系統、免疫系統、骨骼系統、肌肉系統、泌尿系統和生殖系統。",
                "什麼是基因？": "基因是DNA分子上具有特定遺傳效應的片段，是遺傳的基本單位。基因通過編碼蛋白質來控制生物性狀。",
                "什麼是細胞呼吸？": "細胞呼吸是細胞將有機物（如葡萄糖）分解並釋放能量的過程，主要發生在粒線體中，需要氧氣參與。",
                "什麼是生態系統？": "生態系統是由生物群落和其非生物環境相互作用而形成的統一整體，包括生產者、消費者和分解者等組成部分。"
            },
            "程式設計": {
                "什麼是物件導向程式設計？": "物件導向程式設計是一種程式設計範式，基於'物件'的概念，物件包含數據（屬性）和行為（方法）。主要特點包括封裝、繼承和多型。",
                "解釋變數和常數的區別": "變數的值可以在程式執行過程中改變，而常數的值在定義後就不能再改變。常數通常用於儲存不會改變的固定值。",
                "什麼是迴圈？": "迴圈是一種控制結構，允許重複執行一段程式碼，直到滿足特定條件。常見的迴圈類型包括for迴圈、while迴圈和do-while迴圈。",
                "什麼是函數？": "函數是一段可重複使用的程式碼，接受輸入參數，執行特定任務，並返回結果。函數有助於組織程式碼並提高可重用性。"
            },
            "文學": {
                "什麼是十四行詩？": "十四行詩是一種固定形式的詩歌，通常由14行組成，有特定的韻律和押韻方案。最著名的是莎士比亞十四行詩和彼特拉克十四行詩。",
                "解釋隱喻和明喻的區別": "明喻直接使用'像'或'如'等詞比較兩個事物（例如：他跑得像風一樣快）。隱喻則直接將一事物說成另一事物（例如：他是隻狐狸）。",
                "什麼是敘事視角？": "敘事視角是指故事講述的角度，常見的有第一人稱（'我'的視角）、第三人稱有限（跟隨一個角色的思想和感受）和第三人稱全知（知道所有角色的思想和感受）。",
                "什麼是反諷？": "反諷是一種修辭手法，指字面意思與實際意思相反，常用於表達幽默或批評。"
            },
            "歷史": {
                "文藝復興時期的特點是什麼？": "文藝復興是14至17世紀歐洲的文化運動，特點是重新發現古典知識、人文主義興起、藝術和科學的繁榮，以及對個人價值的強調。",
                "工業革命的主要影響是什麼？": "工業革命（18-19世紀）帶來了從農業社會到工業社會的轉變，主要影響包括：工廠系統的出現、城市化加速、新技術發明、社會階級結構變化以及環境影響。",
                "什麼是啟蒙運動？": "啟蒙運動是17-18世紀的知識和文化運動，強調理性、科學、個人自由和懷疑權威。主要思想家包括伏爾泰、盧梭和康德。",
                "第一次世界大戰的起因是什麼？": "第一次世界大戰的起因包括民族主義、帝國主義、軍國主義和複雜的聯盟體系。直接導火線是1914年奧匈帝國皇儲斐迪南大公在塞拉耶佛遇刺。"
            },
            "DSE": {
                "DSE是什麼？": "DSE是香港中學文憑考試（Hong Kong Diploma of Secondary Education Examination）的簡稱，是香港中學生完成中學課程後參加的公開考試，相當於香港的大學入學考試。",
                "DSE考試科目有哪些？": "DSE考試科目分為必修科和選修科。必修科包括中文、英文、數學和通識教育（2024年起改為公民與社會發展）。選修科包括物理、化學、生物、經濟、地理、歷史等20多個科目。",
                "DSE考試時間是什麼時候？": "DSE筆試通常在每年3月至5月期間進行，口試和實習考試則在3月前後舉行。具體時間每年由香港考試及評核局公布。",
                "DSE評分標準是怎樣的？": "DSE採用水平參照模式匯報成績，分為1至5**級，5**為最高等級。第1級為最低，第2級為及格，第5級以上分為5*和5**。",
                "DSE中文科考試內容是什麼？": "DSE中文科分為閱讀、寫作、聆聽、說話四個部分，考核學生的語文綜合運用能力。閱讀和寫作各佔24%，聆聽和說話各佔16%，校本評核佔20%。",
                "DSE英文科考試內容是什麼？": "DSE英文科分為閱讀、寫作、聆聽、說話四個部分，考核學生的英語綜合能力。閱讀和寫作各佔20%，聆聽和綜合能力各佔10%，說話佔14%，校本評核佔16%。",
                "DSE數學科考試內容是什麼？": "DSE數學科分為必修部分和延伸部分（M1/M2）。必修部分包括數與代數、度量、圖形與空間、數據處理等。延伸部分M1為微積分與統計，M2為代數與微積分。",
                "如何準備DSE通識教育科？": "DSE通識教育科（2024年起改為公民與社會發展）考核學生對當代議題的批判思考能力。準備時應關注時事新聞，學習多角度分析問題，並掌握答題技巧和時間管理。",
                "DSE選修科如何選擇？": "選擇DSE選修科應考慮個人興趣、能力、未來升學或就業方向。一般建議選擇2-3門選修科，並確保與大學心儀學科的入學要求相符。",
                "DSE考試如何計算最佳五科成績？": "最佳五科成績是指考生在DSE考試中成績最好的五個科目（包括必修科和選修科）的總和。許多大學課程會以最佳五科成績作為入學篩選標準。"
            },
            "DSE數學": {
                "DSE數學必修部分有哪些主題？": "DSE數學必修部分包括：數與代數（數系、多項式、方程、函數等）、度量（長度、面積、體積等）、圖形與空間（幾何、坐標幾何、三角學等）、數據處理（統計、概率等）。",
                "DSE數學卷一的題型有哪些？": "DSE數學卷一為傳統題，分為甲部（短題目）和乙部（長題目），涵蓋必修部分的所有主題，考試時間為2小時15分鐘。",
                "DSE數學卷二的題型是什麼？": "DSE數學卷二為多項選擇題，共有45題，涵蓋必修部分的所有主題，考試時間為1小時15分鐘。",
                "如何提高DSE數學成績？": "提高DSE數學成績的方法包括：掌握基礎概念、多做練習題、熟悉考試題型、學習時間管理和答題技巧、定期覆習錯題。",
                "DSE數學常見的難點有哪些？": "DSE數學常見難點包括：立體幾何、概率與統計、三角學應用、函數圖像變換、序列與級數等。建議針對這些主題進行重點練習。"
            },
            "DSE英文": {
                "DSE英文科閱讀卷有什麼特點？": "DSE英文閱讀卷分為Part A（必答部分）和Part B（選答部分，分為B1和B2，B2較難但得分上限更高）。文章類型多樣，包括記敘文、說明文、議論文等。",
                "DSE英文科寫作卷有哪些題型？": "DSE英文寫作卷Part A為實用文寫作（如信件、報告等），Part B為題目選擇，包括議論、記敘、說明等不同文體。考生需完成兩篇作文。",
                "如何提高DSE英文聆聽能力？": "提高DSE英文聆聽能力的方法：多聽英語材料（新聞、播客等）、練習筆記技巧、熟悉不同口音、掌握關鍵詞識別、多做模擬試題。",
                "DSE英文說話考試如何準備？": "DSE英文說話考試包括小組討論和個人回應。準備時應：練習表達觀點、學習討論技巧、擴大詞彙量、熟悉常見話題、練習發音和流暢度。"
            },
            "DSE中文": {
                "DSE中文閱讀卷有哪些文言文必讀篇章？": "DSE中文閱讀卷的文言文必讀篇章包括：《論仁、論孝、論君子》、《魚我所欲也》、《逍遙遊》、《勸學》、《廉頗藺相如列傳》、《出師表》等12篇。",
                "DSE中文寫作卷有哪些常見題型？": "DSE中文寫作卷常見題型包括：記敘文、議論文、說明文、實用文等。題目多與個人經歷、社會現象、價值觀等相關。",
                "如何準備DSE中文說話考試？": "準備DSE中文說話考試應：練習口語表達、學習論證技巧、擴大詞彙量、關注時事話題、練習小組互動和個人短講。"
            },
            "DSE物理": {
                "DSE物理科主要考核哪些單元？": "DSE物理科主要考核：熱學、力學、波動、電磁學、放射性、天文學等單元。考試包括筆試和實驗考試。",
                "DSE物理實驗考試要注意什麼？": "DSE物理實驗考試要注意：熟悉實驗步驟、掌握數據處理方法、注意安全事項、練習實驗報告寫作、管理好實驗時間。"
            },
            "DSE化學": {
                "DSE化學科主要考核哪些主題？": "DSE化學科主要考核：地球、金屬、酸和鹽基、化石燃料和碳化合物、微觀世界、化學反應、氧化還原反應、化學電池、化學平衡等主題。",
                "DSE化學實驗考試有哪些常見實驗？": "DSE化學實驗考試常見實驗包括：酸鹼滴定、製備鹽類、金屬活性測試、電解、有機合成等。考生需熟悉實驗步驟和安全措施。"
            },
            "DSE生物": {
                "DSE生物科主要考核哪些單元？": "DSE生物科主要考核：細胞與生命分子、遺傳與進化、生物與環境、健康與疾病、人體生理學等單元。考試包括筆試和實驗考試。",
                "DSE生物實驗考試有哪些技能要求？": "DSE生物實驗考試技能要求包括：顯微鏡使用、生物繪圖、實驗設計、數據記錄與分析、生物樣本處理等。"
            }
        };
        
        // AI助手回應模板
        const aiResponses = {
            encouraging: {
                greeting: "你好！我是你的鼓勵型AI導師。學習是一段美好的旅程，讓我們一起探索知識的宇宙吧！",
                unknown: "這是一個很好的問題！雖然我目前還無法完全回答這個問題，但我鼓勵你繼續探索。學習的過程本身就是一種成長。",
                pdfUploaded: "太棒了！你上傳了一份學習資料。讓我幫你分析一下內容，找出重點和關鍵概念。"
            },
            analytical: {
                greeting: "你好。我是分析型AI助手。我將以邏輯和結構化的方式幫助你理解複雜概念。",
                unknown: "根據我的知識庫，我無法提供這個問題的確切答案。建議你查閱相關教材或學術資源以獲取準確信息。",
                pdfUploaded: "文檔上傳完成。我將系統地分析內容結構、主要論點和關鍵信息，為你提供清晰的總結。"
            },
            humorous: {
                greeting: "嗨！我是你的幽默學習夥伴！學習不一定要嚴肅，讓我們在笑聲中探索知識吧！",
                unknown: "哈哈，這個問題有點超出我的知識範圍了！就像我試圖理解量子物理一樣困惑。讓我們找找其他資源吧！",
                pdfUploaded: "哇，新知識來襲！讓我像偵探一樣仔細檢查這個文檔，找出所有有趣的秘密！"
            }
        };
        
        // 初始化PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';
        
        // 生物學習資源
        const bioResources = {
            "microbiology": [
                { name: "可汗學院 生物學", url: "https://www.khanacademy.org/science/biology", type: "video" },
                { name: "細胞結構互動學習", url: "https://www.cellsalive.com/", type: "interactive" },
                { name: "DNA學習中心", url: "https://www.dnalc.org/", type: "resource" }
            ],
            "anatomy": [
                { name: "人體解剖學圖譜", url: "https://www.visiblebody.com/", type: "interactive" },
                { name: "解剖學學習平台", url: "https://anatomylearning.com/", type: "interactive" },
                { name: "3D人體解剖", url: "https://www.biodigital.com/", type: "3d" }
            ],
            "ecology": [
                { name: "生態系統互動模擬", url: "https://phet.colorado.edu/zh_TW/simulations/filter?subjects=biology&type=html", type: "interactive" },
                { name: "國家地理生態資源", url: "https://www.nationalgeographic.org/education/", type: "resource" }
            ],
            "genetics": [
                { name: "遺傳學學習中心", url: "https://learn.genetics.utah.edu/", type: "interactive" },
                { name: "DNA互動探索", url: "https://www.dnai.org/", type: "interactive" }
            ]
        };
        
        // 全局變量
        let currentPersonality = 'encouraging';
        let uploadedPdfs = [];
        let currentPdfText = '';
        
        // Three.js 相關變量
        let scene, camera, renderer, controls;
        let currentModel = null;
        let xrMode = '3d';
        
        // 用戶管理系統
        class UserManager {
            constructor() {
                this.currentUser = null;
                this.checkAuthState();
            }
            
            // 檢查認證狀態
            async checkAuthState() {
                const { data: { session } } = await supabase.auth.getSession();
                if (session) {
                    this.currentUser = session.user;
                    this.updateAuthUI();
                    
                    // 檢查用戶資料是否存在
                    await this.checkUserProfile();
                } else {
                    this.updateAuthUI();
                }
                
                // 監聽認證狀態變化
                supabase.auth.onAuthStateChange((event, session) => {
                    if (event === 'SIGNED_IN' && session) {
                        this.currentUser = session.user;
                        this.updateAuthUI();
                        this.checkUserProfile();
                    } else if (event === 'SIGNED_OUT') {
                        this.currentUser = null;
                        this.updateAuthUI();
                    }
                });
            }
            
            // 檢查用戶資料是否存在
            async checkUserProfile() {
                const { data, error } = await supabase
                    .from('profiles')
                    .select('*')
                    .eq('id', this.currentUser.id)
                    .single();
                    
                if (error && error.code === 'PGRST116') {
                    // 用戶資料不存在，創建新資料
                    await this.createUserProfile();
                }
            }
            
            // 創建用戶資料
            async createUserProfile() {
                const { error } = await supabase
                    .from('profiles')
                    .insert([
                        { 
                            id: this.currentUser.id,
                            username: this.currentUser.email.split('@')[0],
                            email: this.currentUser.email,
                            created_at: new Date().toISOString()
                        }
                    ]);
                    
                if (error) {
                    console.error('創建用戶資料錯誤:', error);
                }
            }
            
            // 註冊新用戶
            async register(email, password, username) {
                try {
                    const { data, error } = await supabase.auth.signUp({
                        email,
                        password,
                        options: {
                            data: {
                                username: username
                            }
                        }
                    });
                    
                    if (error) {
                        return { success: false, message: error.message };
                    }
                    
                    return { success: true, user: data.user };
                } catch (error) {
                    return { success: false, message: '註冊過程中發生錯誤' };
                }
            }
            
            // 登入
            async login(email, password) {
                try {
                    const { data, error } = await supabase.auth.signInWithPassword({
                        email,
                        password
                    });
                    
                    if (error) {
                        return { success: false, message: error.message };
                    }
                    
                    this.currentUser = data.user;
                    this.updateAuthUI();
                    return { success: true, user: data.user };
                } catch (error) {
                    return { success: false, message: '登入過程中發生錯誤' };
                }
            }
            
            // 登出
            async logout() {
                const { error } = await supabase.auth.signOut();
                if (error) {
                    console.error('登出錯誤:', error);
                }
                this.currentUser = null;
                this.updateAuthUI();
            }
            
            // 更新UI顯示用戶狀態
            updateAuthUI() {
                const authButtons = document.getElementById('authButtons');
                
                if (this.currentUser) {
                    // 用戶已登入
                    const username = this.currentUser.user_metadata?.username || this.currentUser.email.split('@')[0];
                    
                    authButtons.innerHTML = `
                        <div class="user-info">
                            <div class="user-avatar">${username.charAt(0).toUpperCase()}</div>
                            <span>${username}</span>
                        </div>
                        <button class="btn btn-outline" id="logoutBtn">登出</button>
                    `;
                    
                    document.getElementById('logoutBtn').addEventListener('click', () => {
                        this.logout();
                    });
                } else {
                    // 用戶未登入
                    authButtons.innerHTML = `
                        <button class="btn btn-outline" id="loginBtn">登入</button>
                        <button class="btn btn-primary" id="registerBtn">註冊</button>
                    `;
                    
                    document.getElementById('loginBtn').addEventListener('click', () => {
                        document.getElementById('loginModal').classList.add('active');
                    });
                    
                    document.getElementById('registerBtn').addEventListener('click', () => {
                        document.getElementById('registerModal').classList.add('active');
                    });
                }
            }
        }
        
        // 初始化用戶管理器
        const userManager = new UserManager();
        
        // 模態框功能
        function setupModals() {
            // 註冊模態框
            const registerModal = document.getElementById('registerModal');
            const closeRegisterModal = document.getElementById('closeRegisterModal');
            const showLoginForm = document.getElementById('showLoginForm');
            
            closeRegisterModal.addEventListener('click', () => {
                registerModal.classList.remove('active');
            });
            
            showLoginForm.addEventListener('click', () => {
                registerModal.classList.remove('active');
                document.getElementById('loginModal').classList.add('active');
            });
            
            // 登入模態框
            const loginModal = document.getElementById('loginModal');
            const closeLoginModal = document.getElementById('closeLoginModal');
            const showRegisterForm = document.getElementById('showRegisterForm');
            
            closeLoginModal.addEventListener('click', () => {
                loginModal.classList.remove('active');
            });
            
            showRegisterForm.addEventListener('click', () => {
                loginModal.classList.remove('active');
                registerModal.classList.add('active');
            });
            
            // 點擊模態框外部關閉
            [registerModal, loginModal].forEach(modal => {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        modal.classList.remove('active');
                    }
                });
            });
        }
        
        // 表單驗證和提交
        function setupForms() {
            // 註冊表單
            const registerForm = document.getElementById('registerForm');
            registerForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // 重置錯誤消息
                document.querySelectorAll('.error-message').forEach(el => {
                    el.style.display = 'none';
                });
                document.getElementById('registerSuccess').style.display = 'none';
                
                const username = document.getElementById('registerUsername').value;
                const email = document.getElementById('registerEmail').value;
                const password = document.getElementById('registerPassword').value;
                const confirmPassword = document.getElementById('registerConfirmPassword').value;
                
                let hasError = false;
                
                // 用戶名驗證
                if (username.length < 3) {
                    document.getElementById('usernameError').textContent = '用戶名至少需要3個字符';
                    document.getElementById('usernameError').style.display = 'block';
                    hasError = true;
                }
                
                // 郵件驗證
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    document.getElementById('emailError').textContent = '請輸入有效的電子郵件地址';
                    document.getElementById('emailError').style.display = 'block';
                    hasError = true;
                }
                
                // 密碼驗證
                if (password.length < 6) {
                    document.getElementById('passwordError').textContent = '密碼至少需要6個字符';
                    document.getElementById('passwordError').style.display = 'block';
                    hasError = true;
                }
                
                // 確認密碼
                if (password !== confirmPassword) {
                    document.getElementById('confirmPasswordError').textContent = '密碼不匹配';
                    document.getElementById('confirmPasswordError').style.display = 'block';
                    hasError = true;
                }
                
                if (!hasError) {
                    // 提交註冊
                    const result = await userManager.register(email, password, username);
                    
                    if (result.success) {
                        document.getElementById('registerSuccess').style.display = 'block';
                        registerForm.reset();
                        
                        // 自動關閉模態框
                        setTimeout(() => {
                            document.getElementById('registerModal').classList.remove('active');
                        }, 1500);
                    } else {
                        document.getElementById('emailError').textContent = result.message;
                        document.getElementById('emailError').style.display = 'block';
                    }
                }
            });
            
            // 登入表單
            const loginForm = document.getElementById('loginForm');
            loginForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // 重置錯誤消息
                document.querySelectorAll('.error-message').forEach(el => {
                    el.style.display = 'none';
                });
                
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                
                // 基本驗證
                if (!email) {
                    document.getElementById('loginEmailError').textContent = '請輸入電子郵件';
                    document.getElementById('loginEmailError').style.display = 'block';
                    return;
                }
                
                if (!password) {
                    document.getElementById('loginPasswordError').textContent = '請輸入密碼';
                    document.getElementById('loginPasswordError').style.display = 'block';
                    return;
                }
                
                // 嘗試登入
                const result = await userManager.login(email, password);
                
                if (result.success) {
                    loginForm.reset();
                    document.getElementById('loginModal').classList.remove('active');
                } else {
                    document.getElementById('loginError').textContent = result.message;
                    document.getElementById('loginError').style.display = 'block';
                }
            });
        }
        
        // 星際導航員功能
        function setupNavigator() {
            const steps = document.querySelectorAll('.step');
            const stepContents = document.querySelectorAll('.step-content');
            let currentStep = 1;
            
            // 更新步驟顯示
            function updateSteps() {
                steps.forEach(step => {
                    const stepNum = parseInt(step.getAttribute('data-step'));
                    if (stepNum === currentStep) {
                        step.classList.add('active');
                    } else {
                        step.classList.remove('active');
                    }
                });
                
                stepContents.forEach(content => {
                    const contentId = content.id;
                    const contentStep = parseInt(contentId.replace('step', ''));
                    if (contentStep === currentStep) {
                        content.classList.add('active');
                    } else {
                        content.classList.remove('active');
                    }
                });
            }
            
            // 下一步按鈕事件
            document.getElementById('nextStep1').addEventListener('click', function() {
                currentStep = 2;
                updateSteps();
            });
            
            document.getElementById('nextStep2').addEventListener('click', function() {
                currentStep = 3;
                updateSteps();
            });
            
            document.getElementById('nextStep3').addEventListener('click', function() {
                currentStep = 4;
                updateSteps();
                generateLearningPath();
            });
            
            // 上一步按鈕事件
            document.getElementById('prevStep2').addEventListener('click', function() {
                currentStep = 1;
                updateSteps();
            });
            
            document.getElementById('prevStep3').addEventListener('click', function() {
                currentStep = 2;
                updateSteps();
            });
            
            document.getElementById('prevStep4').addEventListener('click', function() {
                currentStep = 1;
                updateSteps();
            });
            
            // 保存學習路徑
            document.getElementById('savePath').addEventListener('click', async function() {
                if (!userManager.currentUser) {
                    alert('請先登入以保存學習路徑');
                    document.getElementById('loginModal').classList.add('active');
                    return;
                }
                
                // 收集學習路徑數據
                const learningStyle = document.getElementById('learningStyle').value;
                const attentionSpan = document.getElementById('attentionSpan').value;
                const learningPace = document.getElementById('learningPace').value;
                const learningGoal = document.getElementById('learningGoal').value;
                const proficiencyLevel = document.getElementById('proficiencyLevel').value;
                const timeCommitment = document.getElementById('timeCommitment').value;
                
                // 獲取選中的興趣領域
                const interests = [];
                const interestCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
                interestCheckboxes.forEach(checkbox => {
                    interests.push(checkbox.value);
                });
                
                const specificTopics = document.getElementById('specificTopics').value;
                
                // 保存到 Supabase
                const { error } = await supabase
                    .from('learning_paths')
                    .insert([
                        {
                            user_id: userManager.currentUser.id,
                            learning_style: learningStyle,
                            attention_span: attentionSpan,
                            learning_pace: learningPace,
                            learning_goal: learningGoal,
                            proficiency_level: proficiencyLevel,
                            time_commitment: timeCommitment,
                            interests: interests,
                            specific_topics: specificTopics,
                            created_at: new Date().toISOString()
                        }
                    ]);
                    
                if (error) {
                    console.error('保存學習路徑錯誤:', error);
                    alert('保存學習路徑時發生錯誤');
                } else {
                    alert('學習路徑已保存！現在開始你的星際探索之旅吧！');
                }
            });
            
            // 從英雄區域開始導航員
            document.getElementById('startNavigator').addEventListener('click', function() {
                if (!userManager.currentUser) {
                    document.getElementById('loginModal').classList.add('active');
                } else {
                    document.getElementById('navigator').scrollIntoView({ behavior: 'smooth' });
                }
            });
            
            // 探索生物星球
            document.getElementById('exploreBioPlanet').addEventListener('click', function() {
                document.getElementById('bio-planet').scrollIntoView({ behavior: 'smooth' });
            });
        }
        
        // 優質線上學習資源庫
        const learningResources = {
            math: [
                { name: "Khan Academy 數學", url: "https://www.khanacademy.org/math", type: "video" },
                { name: "3Blue1Brown 可視化數學", url: "https://www.3blue1brown.com/", type: "video" },
                { name: "Brilliant 互動數學", url: "https://brilliant.org/courses/math-fundamentals/", type: "interactive" },
                { name: "MIT OpenCourseWare 數學", url: "https://ocw.mit.edu/courses/mathematics/", type: "course" }
            ],
            programming: [
                { name: "FreeCodeCamp", url: "https://www.freecodecamp.org/", type: "interactive" },
                { name: "Codecademy", url: "https://www.codecademy.com/", type: "interactive" },
                { name: "MDN Web Docs", url: "https://developer.mozilla.org/", type: "documentation" },
                { name: "Harvard CS50", url: "https://cs50.harvard.edu/", type: "course" },
                { name: "LeetCode 演算法練習", url: "https://leetcode.com/", type: "practice" }
            ],
            physics: [
                { name: "Khan Academy 物理", url: "https://www.khanacademy.org/science/physics", type: "video" },
                { name: "The Feynman Lectures", url: "https://www.feynmanlectures.caltech.edu/", type: "book" },
                { name: "Physics Classroom", url: "https://www.physicsclassroom.com/", type: "interactive" },
                { name: "MIT OpenCourseWare 物理", url: "https://ocw.mit.edu/courses/physics/", type: "course" }
            ],
            biology: [
                { name: "Khan Academy 生物學", url: "https://www.khanacademy.org/science/biology", type: "video" },
                { name: "可汗學院 生物學", url: "https://www.khanacademy.org/science/biology", type: "video" },
                { name: "細胞結構互動學習", url: "https://www.cellsalive.com/", type: "interactive" },
                { name: "DNA學習中心", url: "https://www.dnalc.org/", type: "resource" },
                { name: "人體解剖學圖譜", url: "https://www.visiblebody.com/", type: "interactive" },
                { name: "生態系統互動模擬", url: "https://phet.colorado.edu/zh_TW/simulations/filter?subjects=biology&type=html", type: "interactive" },
                { name: "遺傳學學習中心", url: "https://learn.genetics.utah.edu/", type: "interactive" }
            ],
            literature: [
                { name: "Project Gutenberg 免費電子書", url: "https://www.gutenberg.org/", type: "book" },
                { name: "Coursera 文學課程", url: "https://www.coursera.org/browse/arts-and-humanities/literature", type: "course" },
                { name: "Poetry Foundation", url: "https://www.poetryfoundation.org/", type: "resource" },
                { name: "The British Library 文學資源", url: "https://www.bl.uk/subjects/literature", type: "resource" }
            ],
            language: [
                { name: "Duolingo", url: "https://www.duolingo.com/", type: "interactive" },
                { name: "Memrise", url: "https://www.memrise.com/", type: "interactive" },
                { name: "BBC Languages", url: "http://www.bbc.co.uk/languages/", type: "resource" },
                { name: "TED Talks 多語言", url: "https://www.ted.com/talks", type: "video" }
            ],
            dse: [
                { name: "香港考試及評核局", url: "https://www.hkeaa.edu.hk/tc/hkdse/", type: "official" },
                { name: "DSE Past Papers", url: "https://www.dse.life/", type: "practice" },
                { name: "DSE 資源平台", url: "https://dsepp.com/", type: "resource" },
                { name: "DSE 攻略分享", url: "https://www.student.hk/dse", type: "guide" }
            ]
        };
        
        // 生成學習路徑
        function generateLearningPath() {
            const learningStyle = document.getElementById('learningStyle').value;
            const attentionSpan = document.getElementById('attentionSpan').value;
            const learningPace = document.getElementById('learningPace').value;
            const learningGoal = document.getElementById('learningGoal').value;
            const proficiencyLevel = document.getElementById('proficiencyLevel').value;
            const timeCommitment = document.getElementById('timeCommitment').value;
            
            // 獲取選中的興趣領域
            const interests = [];
            const interestCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            interestCheckboxes.forEach(checkbox => {
                interests.push(checkbox.value);
            });
            
            const specificTopics = document.getElementById('specificTopics').value;
            
            // 生成AI分析文本
            let analysisText = "根據你的學習風格和目標，AI建議";
            
            if (learningStyle === 'visual') {
                analysisText += "採用視覺化學習方法，多使用圖表、影片和圖像來幫助理解概念。";
            } else if (learningStyle === 'auditory') {
                analysisText += "採用聽覺學習方法，多參與討論和聽取講解來強化學習效果。";
            } else if (learningStyle === 'kinesthetic') {
                analysisText += "採用實踐學習方法，透過動手操作和實際應用來鞏固知識。";
            } else {
                analysisText += "採用閱讀學習方法，透過深入閱讀和筆記來掌握知識。";
            }
            
            if (attentionSpan === 'short') {
                analysisText += " 考慮到你的注意力集中時間較短，建議將學習內容分成小模組，每15-25分鐘休息一次。";
            } else if (attentionSpan === 'medium') {
                analysisText += " 考慮到你的注意力集中時間中等，建議每30-45分鐘安排一次休息。";
            } else {
                analysisText += " 考慮到你的注意力集中時間較長，可以安排較長的學習時段，但也要注意適當休息。";
            }
            
            if (learningPace === 'slow') {
                analysisText += " 你的學習節奏較慢，建議深入理解每個概念，不追求速度。";
            } else if (learningPace === 'fast') {
                analysisText += " 你的學習節奏較快，建議先掌握大綱和核心概念，再深入細節。";
            } else {
                analysisText += " 你的學習節奏適中，建議平衡深度和進度。";
            }
            
            // 根據學習目標提供建議
            if (learningGoal === 'academic') {
                analysisText += " 針對學業進步目標，建議專注於基礎概念的建立和考試技巧的練習。";
            } else if (learningGoal === 'career') {
                analysisText += " 針對職業發展目標，建議注重實用技能和行業相關知識的學習。";
            } else if (learningGoal === 'certification') {
                analysisText += " 針對專業認證目標，建議按照認證考試大綱進行系統性學習和模擬測試。";
            } else if (learningGoal === 'dse') {
                analysisText += " 針對DSE考試目標，建議按照考評局大綱進行系統複習，並多做歷屆試題。";
            } else {
                analysisText += " 針對個人興趣目標，建議保持學習的樂趣和探索精神。";
            }
            
            document.getElementById('aiAnalysisText').textContent = analysisText;
            
            // 生成學習路徑
            const learningPath = document.getElementById('learningPath');
            learningPath.innerHTML = '';
            
            // 根據興趣領域生成學習模組
            const modules = [];
            
            if (interests.includes('math')) {
                modules.push({
                    title: '數學基礎概念',
                    icon: '🧮',
                    description: '建立數學思維基礎，掌握核心概念和公式',
                    duration: '2週',
                    status: 'current',
                    details: '從代數、幾何和基礎統計學開始，建立數學思維框架。',
                    resources: learningResources.math
                });
                
                if (proficiencyLevel === 'intermediate' || proficiencyLevel === 'advanced') {
                    modules.push({
                        title: '高級數學應用',
                        icon: '📊',
                        description: '學習微積分、線性代數和概率論',
                        duration: '3週',
                        status: 'pending',
                        details: '深入理解數學在現實世界中的應用，解決複雜問題。',
                        resources: learningResources.math.filter(r => r.name.includes("MIT") || r.name.includes("3Blue1Brown"))
                    });
                }
            }
            
            if (interests.includes('programming')) {
                modules.push({
                    title: '程式設計入門',
                    icon: '💻',
                    description: '學習程式設計基礎，掌握邏輯思維和基本語法',
                    duration: '3週',
                    status: interests.includes('math') ? 'pending' : 'current',
                    details: '從Python或JavaScript開始，學習變數、函數、控制流程等基礎概念。',
                    resources: learningResources.programming.filter(r => r.name.includes("FreeCodeCamp") || r.name.includes("Codecademy"))
                });
                
                if (proficiencyLevel === 'intermediate' || proficiencyLevel === 'advanced') {
                    modules.push({
                        title: '演算法與數據結構',
                        icon: '⚙️',
                        description: '掌握高效解決問題的演算法和數據組織方法',
                        duration: '4週',
                        status: 'pending',
                        details: '學習排序、搜索、樹結構、圖算法等核心計算機科學概念。',
                        resources: learningResources.programming.filter(r => r.name.includes("LeetCode") || r.name.includes("Harvard"))
                    });
                }
            }
            
            if (interests.includes('physics')) {
                modules.push({
                    title: '物理學原理',
                    icon: '🌌',
                    description: '探索物理學基本原理，理解自然規律',
                    duration: '2週',
                    status: (interests.includes('math') || interests.includes('programming')) ? 'pending' : 'current',
                    details: '從力學、熱學和電磁學開始，建立物理學思維框架。',
                    resources: learningResources.physics
                });
            }
            
            if (interests.includes('biology')) {
                modules.push({
                    title: '生物學基礎',
                    icon: '🧬',
                    description: '探索生命科學，從細胞到生態系統',
                    duration: '3週',
                    status: 'current',
                    details: '學習細胞結構、遺傳學、進化論和生態系統等基礎生物學概念。',
                    resources: learningResources.biology
                });
                
                if (proficiencyLevel === 'intermediate' || proficiencyLevel === 'advanced') {
                    modules.push({
                        title: '分子生物學與遺傳學',
                        icon: '🔬',
                        description: '深入探索DNA、基因和分子生物學',
                        duration: '3週',
                        status: 'pending',
                        details: '學習DNA結構、基因表達、蛋白質合成和遺傳工程等進階主題。',
                        resources: learningResources.biology.filter(r => r.name.includes("DNA") || r.name.includes("遺傳"))
                    });
                    
                    modules.push({
                        title: '人體解剖與生理學',
                        icon: '🧠',
                        description: '深入了解人體結構和功能',
                        duration: '4週',
                        status: 'pending',
                        details: '探索人體各系統的結構和功能，包括神經系統、循環系統和消化系統等。',
                        resources: learningResources.biology.filter(r => r.name.includes("解剖") || r.name.includes("人體"))
                    });
                }
            }
            
            if (interests.includes('literature')) {
                modules.push({
                    title: '文學欣賞與分析',
                    icon: '📚',
                    description: '學習文學分析方法，提升文學素養',
                    duration: '2週',
                    status: 'pending',
                    details: '閱讀經典文學作品，學習文學批評和文本分析方法。',
                    resources: learningResources.literature
                });
            }
            
            if (interests.includes('language')) {
                modules.push({
                    title: '語言學習基礎',
                    icon: '🗣️',
                    description: '建立語言學習基礎，掌握核心詞彙和語法',
                    duration: '4週',
                    status: 'pending',
                    details: '選擇一門目標語言，通過沉浸式學習方法快速入門。',
                    resources: learningResources.language
                });
            }
            
            if (interests.includes('dse')) {
                modules.push({
                    title: 'DSE考試概覽',
                    icon: '📝',
                    description: '了解DSE考試結構、評分標準和準備策略',
                    duration: '1週',
                    status: 'current',
                    details: '全面了解DSE考試的各個方面，包括必修科目和選修科目。',
                    resources: learningResources.dse
                });
                
                if (interests.includes('math')) {
                    modules.push({
                        title: 'DSE數學備考',
                        icon: '🧮',
                        description: '掌握DSE數學考試要點和答題技巧',
                        duration: '4週',
                        status: 'pending',
                        details: '重點複習DSE數學必修部分，包括數與代數、度量、圖形與空間、數據處理等主題。',
                        resources: learningResources.dse
                    });
                }
                
                if (interests.includes('biology')) {
                    modules.push({
                        title: 'DSE生物備考',
                        icon: '🧬',
                        description: '掌握DSE生物考試要點和實驗技巧',
                        duration: '4週',
                        status: 'pending',
                        details: '重點複習DSE生物科，包括細胞與生命分子、遺傳與進化、生物與環境等主題。',
                        resources: learningResources.dse
                    });
                }
                
                if (interests.includes('physics') || interests.includes('chemistry') || interests.includes('biology')) {
                    modules.push({
                        title: 'DSE科學科目備考',
                        icon: '🔬',
                        description: '掌握DSE科學科目考試要點和實驗技巧',
                        duration: '4週',
                        status: 'pending',
                        details: '根據選擇的科學科目，重點複習相關理論知識和實驗技能。',
                        resources: learningResources.dse
                    });
                }
            }
            
            // 如果有特定主題，添加自定義模組
            if (specificTopics) {
                modules.push({
                    title: `專題研究: ${specificTopics}`,
                    icon: '🔍',
                    description: '深入探索你感興趣的特定主題',
                    duration: '4週',
                    status: 'pending',
                    details: '根據你的具體興趣領域，設計個性化的深入學習計劃。',
                    resources: []
                });
            }
            
            // 根據學習風格調整模組順序和內容
            if (learningStyle === 'visual') {
                modules.forEach(module => {
                    if (module.resources) {
                        module.resources = module.resources.filter(r => r.type === 'video' || r.type === 'interactive' || r.type === '3d');
                    }
                });
            } else if (learningStyle === 'auditory') {
                modules.forEach(module => {
                    if (module.resources) {
                        module.resources = module.resources.filter(r => r.type === 'video' || r.type === 'course');
                    }
                });
            } else if (learningStyle === 'reading') {
                modules.forEach(module => {
                    if (module.resources) {
                        module.resources = module.resources.filter(r => r.type === 'book' || r.type === 'documentation' || r.type === 'resource');
                    }
                });
            }
            
            // 添加複習和實踐模組
            modules.push({
                title: '綜合實踐與複習',
                icon: '🔄',
                description: '整合所學知識，進行綜合應用和複習',
                duration: '2週',
                status: 'pending',
                details: '通過項目實踐和綜合練習，鞏固所學知識並發現需要加強的領域。'
            });
            
            // 渲染學習路徑
            modules.forEach(module => {
                const pathItem = document.createElement('div');
                pathItem.className = 'path-item';
                
                let resourcesHTML = '';
                if (module.resources && module.resources.length > 0) {
                    resourcesHTML = '<div class="path-resources">推薦資源: ';
                    module.resources.forEach(resource => {
                        resourcesHTML += `<a href="${resource.url}" target="_blank" class="resource-link">${resource.name}</a>`;
                    });
                    resourcesHTML += '</div>';
                }
                
                pathItem.innerHTML = `
                    <div class="path-icon">${module.icon}</div>
                    <div class="path-content">
                        <div class="path-title">${module.title}</div>
                        <div class="path-desc">${module.description} • 預計時長: ${module.duration}</div>
                        <div class="path-details">${module.details}</div>
                        ${resourcesHTML}
                    </div>
                    <div class="path-status status-${module.status}">${module.status === 'current' ? '進行中' : '待開始'}</div>
                `;
                
                learningPath.appendChild(pathItem);
            });
            
            // 添加學習建議
            const adviceItem = document.createElement('div');
            adviceItem.className = 'path-item';
            adviceItem.innerHTML = `
                <div class="path-icon">💡</div>
                <div class="path-content">
                    <div class="path-title">學習建議</div>
                    <div class="path-desc">根據你的學習風格和目標定制的建議</div>
                    <div class="path-details">
                        <ul>
                            <li>每週安排固定學習時間，保持連續性</li>
                            <li>完成每個模組後進行自我測試，鞏固知識</li>
                            <li>加入相關學習社群，與他人交流學習心得</li>
                            <li>定期回顧學習進度，調整學習策略</li>
                        </ul>
                    </div>
                </div>
            `;
            learningPath.appendChild(adviceItem);
        }
        
        // 設置生物星球XR體驗
        function setupBioPlanetXR() {
            // 初始化Three.js場景
            initThreeScene();
            
            // XR模式選擇
            const xrOptions = document.querySelectorAll('.xr-option');
            xrOptions.forEach(option => {
                option.addEventListener('click', function() {
                    xrOptions.forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                    xrMode = this.getAttribute('data-mode');
                    updateXRMode();
                });
            });
            
            // 模型加載按鈕
            document.getElementById('loadDNAScene').addEventListener('click', function() {
                loadDNAScene();
            });
            
            document.getElementById('loadCellScene').addEventListener('click', function() {
                loadCellScene();
            });
            
            // VR模式進入
            document.getElementById('enterVR').addEventListener('click', function() {
                enterVRMode();
            });
            
            // 模型控制
            document.getElementById('rotateModel').addEventListener('click', function() {
                if (currentModel) {
                    currentModel.rotation.y += Math.PI / 4;
                }
            });
            
            document.getElementById('zoomIn').addEventListener('click', function() {
                camera.position.z -= 1;
            });
            
            document.getElementById('zoomOut').addEventListener('click', function() {
                camera.position.z += 1;
            });
            
            document.getElementById('resetModel').addEventListener('click', function() {
                resetCamera();
            });
        }
        
        // 初始化Three.js場景
        function initThreeScene() {
            const container = document.getElementById('modelViewer');
            
            // 創建場景
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x0f1c3f);
            
            // 創建相機
            camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.z = 5;
            
            // 創建渲染器
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            container.appendChild(renderer.domElement);
            
            // 添加軌道控制
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            
            // 添加光源
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 20, 15);
            scene.add(directionalLight);
            
            // 初始加載DNA場景
            loadDNAScene();
            
            // 動畫循環
            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
            
            // 窗口大小調整
            window.addEventListener('resize', function() {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });
        }
        
        // 加載DNA場景
        function loadDNAScene() {
            // 清除現有模型
            if (currentModel) {
                scene.remove(currentModel);
            }
            
            // 創建DNA雙螺旋結構
            const dnaGroup = new THREE.Group();
            
            // 創建鹼基對
            const baseGeometry = new THREE.SphereGeometry(0.1, 16, 16);
            const baseMaterial = new THREE.MeshPhongMaterial({ color: 0x00cc66 });
            
            // 創建骨架
            const backboneGeometry = new THREE.CylinderGeometry(0.05, 0.05, 1, 8);
            const backboneMaterial = new THREE.MeshPhongMaterial({ color: 0x8a6eff });
            
            for (let i = 0; i < 20; i++) {
                // 鹼基對
                const base1 = new THREE.Mesh(baseGeometry, baseMaterial);
                const base2 = new THREE.Mesh(baseGeometry, baseMaterial);
                
                const angle = i * 0.5;
                const radius = 1.5;
                
                base1.position.set(Math.cos(angle) * radius, i * 0.3, Math.sin(angle) * radius);
                base2.position.set(Math.cos(angle + Math.PI) * radius, i * 0.3, Math.sin(angle + Math.PI) * radius);
                
                dnaGroup.add(base1);
                dnaGroup.add(base2);
                
                // 連接鹼基對的線
                const baseConnectorGeometry = new THREE.CylinderGeometry(0.02, 0.02, radius * 2, 8);
                const baseConnector = new THREE.Mesh(baseConnectorGeometry, baseMaterial);
                baseConnector.position.set(0, i * 0.3, 0);
                baseConnector.rotation.z = Math.PI / 2;
                dnaGroup.add(baseConnector);
                
                // 骨架
                if (i < 19) {
                    const backbone1 = new THREE.Mesh(backboneGeometry, backboneMaterial);
                    const backbone2 = new THREE.Mesh(backboneGeometry, backboneMaterial);
                    
                    backbone1.position.set(
                        (Math.cos(angle) * radius + Math.cos(angle + 0.5) * radius) / 2,
                        i * 0.3 + 0.15,
                        (Math.sin(angle) * radius + Math.sin(angle + 0.5) * radius) / 2
                    );
                    
                    backbone2.position.set(
                        (Math.cos(angle + Math.PI) * radius + Math.cos(angle + Math.PI + 0.5) * radius) / 2,
                        i * 0.3 + 0.15,
                        (Math.sin(angle + Math.PI) * radius + Math.sin(angle + Math.PI + 0.5) * radius) / 2
                    );
                    
                    // 計算骨架方向
                    const dir1 = new THREE.Vector3(
                        Math.cos(angle + 0.5) * radius - Math.cos(angle) * radius,
                        0.3,
                        Math.sin(angle + 0.5) * radius - Math.sin(angle) * radius
                    ).normalize();
                    
                    const dir2 = new THREE.Vector3(
                        Math.cos(angle + Math.PI + 0.5) * radius - Math.cos(angle + Math.PI) * radius,
                        0.3,
                        Math.sin(angle + Math.PI + 0.5) * radius - Math.sin(angle + Math.PI) * radius
                    ).normalize();
                    
                    backbone1.lookAt(backbone1.position.clone().add(dir1));
                    backbone2.lookAt(backbone2.position.clone().add(dir2));
                    
                    dnaGroup.add(backbone1);
                    dnaGroup.add(backbone2);
                }
            }
            
            scene.add(dnaGroup);
            currentModel = dnaGroup;
            
            // 更新模型信息
            updateModelInfo('DNA雙螺旋結構', 'DNA是由兩條多核苷酸鏈組成的雙螺旋結構，是生物遺傳信息的載體。');
        }
        
        // 加載細胞場景
        function loadCellScene() {
            // 清除現有模型
            if (currentModel) {
                scene.remove(currentModel);
            }
            
            // 創建細胞結構
            const cellGroup = new THREE.Group();
            
            // 細胞膜
            const cellMembraneGeometry = new THREE.SphereGeometry(2, 32, 32);
            const cellMembraneMaterial = new THREE.MeshPhongMaterial({ 
                color: 0xffff00, 
                transparent: true, 
                opacity: 0.3 
            });
            const cellMembrane = new THREE.Mesh(cellMembraneGeometry, cellMembraneMaterial);
            cellGroup.add(cellMembrane);
            
            // 細胞核
            const nucleusGeometry = new THREE.SphereGeometry(0.8, 32, 32);
            const nucleusMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
            const nucleus = new THREE.Mesh(nucleusGeometry, nucleusMaterial);
            nucleus.position.set(0.5, 0.3, 0.2);
            cellGroup.add(nucleus);
            
            // 粒線體
            const mitochondriaGeometry = new THREE.SphereGeometry(0.3, 16, 16);
            const mitochondriaMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });
            const mitochondria = new THREE.Mesh(mitochondriaGeometry, mitochondriaMaterial);
            mitochondria.position.set(-0.7, -0.5, 0.5);
            cellGroup.add(mitochondria);
            
            // 高基氏體
            const golgiGeometry = new THREE.ConeGeometry(0.2, 0.6, 8);
            const golgiMaterial = new THREE.MeshPhongMaterial({ color: 0xff00ff });
            const golgi = new THREE.Mesh(golgiGeometry, golgiMaterial);
            golgi.position.set(0.8, -0.3, -0.6);
            golgi.rotation.x = Math.PI / 2;
            cellGroup.add(golgi);
            
            scene.add(cellGroup);
            currentModel = cellGroup;
            
            // 更新模型信息
            updateModelInfo('動物細胞結構', '動物細胞包含細胞膜、細胞核、粒線體、高基氏體等結構，每種結構都有特定的功能。');
        }
        
        // 更新模型信息
        function updateModelInfo(title, description) {
            const modelInfo = document.querySelector('.model-info');
            modelInfo.innerHTML = `
                <h4>${title}</h4>
                <p>${description}</p>
            `;
        }
        
        // 重置相機
        function resetCamera() {
            camera.position.set(0, 0, 5);
            controls.reset();
        }
        
        // 更新XR模式
        function updateXRMode() {
            // 這裡可以根據選擇的模式調整場景設置
            console.log(`切換到 ${xrMode} 模式`);
        }
        
        // 進入VR模式
        function enterVRMode() {
            if (navigator.xr) {
                navigator.xr.isSessionSupported('immersive-vr').then((supported) => {
                    if (supported) {
                        // 這裡可以實現VR會話
                        alert('VR模式即將開啟！請確保您的VR設備已連接。');
                    } else {
                        alert('您的設備不支持VR模式。');
                    }
                });
            } else {
                alert('您的瀏覽器不支持WebXR。請使用最新版本的Chrome或Firefox。');
            }
        }
        
        // 設置AI助手功能
        function setupAIAssistant() {
            const personalityButtons = document.querySelectorAll('.personality-btn');
            
            personalityButtons.forEach(button => {
                button.addEventListener('click', function() {
                    personalityButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    currentPersonality = this.getAttribute('data-personality');
                    
                    // 更新問候語
                    addAIMessage(aiResponses[currentPersonality].greeting);
                });
            });
            
            // 設置PDF上傳功能
            setupPDFUpload();
            
            // 設置聊天功能
            setupChat();
        }
        
        // 設置PDF上傳功能
        function setupPDFUpload() {
            const pdfUploadArea = document.getElementById('pdfUploadArea');
            const pdfFileInput = document.getElementById('pdfFileInput');
            const pdfPreview = document.getElementById('pdfPreview');
            const pdfFileName = document.getElementById('pdfFileName');
            const pdfFileSize = document.getElementById('pdfFileSize');
            const pdfPageCount = document.getElementById('pdfPageCount');
            const pdfSummaryContent = document.getElementById('pdfSummaryContent');
            const uploadedPdfList = document.getElementById('uploadedPdfList');
            
            // 點擊上傳區域觸發文件選擇
            pdfUploadArea.addEventListener('click', () => {
                pdfFileInput.click();
            });
            
            // 文件選擇變化
            pdfFileInput.addEventListener('change', handlePDFUpload);
            
            // 處理PDF上傳
            async function handlePDFUpload(event) {
                const file = event.target.files[0];
                if (!file || file.type !== 'application/pdf') {
                    alert('請上傳有效的PDF文件');
                    return;
                }
                
                // 顯示文件信息
                pdfFileName.textContent = file.name;
                pdfFileSize.textContent = formatFileSize(file.size);
                
                // 顯示預覽區域
                pdfPreview.style.display = 'block';
                
                // 顯示分析中消息
                pdfSummaryContent.innerHTML = '<div class="typing-indicator"></div>正在分析文檔內容...';
                
                try {
                    // 讀取PDF文件
                    const arrayBuffer = await file.arrayBuffer();
                    const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;
                    
                    // 顯示頁數
                    pdfPageCount.textContent = pdf.numPages;
                    
                    // 提取文本內容
                    let fullText = '';
                    for (let i = 1; i <= pdf.numPages; i++) {
                        const page = await pdf.getPage(i);
                        const textContent = await page.getTextContent();
                        const pageText = textContent.items.map(item => item.str).join(' ');
                        fullText += pageText + '\n';
                    }
                    
                    currentPdfText = fullText;
                    
                    // 生成摘要
                    const summary = generatePDFSummary(fullText, file.name);
                    pdfSummaryContent.innerHTML = summary;
                    
                    // 添加到已上傳列表
                    addToUploadedList(file.name, file.size, pdf.numPages, summary);
                    
                    // 在聊天中通知用戶
                    addAIMessage(aiResponses[currentPersonality].pdfUploaded);
                    
                } catch (error) {
                    console.error('PDF處理錯誤:', error);
                    pdfSummaryContent.textContent = '抱歉，處理PDF時出現錯誤。請嘗試其他文件。';
                }
            }
            
            // 格式化文件大小
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            // 生成PDF摘要 - 改進版
            function generatePDFSummary(text, filename) {
                // 簡單的文本分析 - 實際應用中可以使用更複雜的NLP技術
                const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
                const words = text.split(/\s+/).filter(w => w.length > 0);
                
                // 提取關鍵詞（簡單實現）
                const commonWords = ['的', '是', '在', '有', '和', '與', '或', '了', '這', '那', '你', '我', '他'];
                const wordFreq = {};
                words.forEach(word => {
                    if (word.length > 1 && !commonWords.includes(word)) {
                        wordFreq[word] = (wordFreq[word] || 0) + 1;
                    }
                });
                
                // 獲取最常見的詞
                const topWords = Object.entries(wordFreq)
                    .sort((a, b) => b[1] - a[1])
                    .slice(0, 8)
                    .map(entry => entry[0]);
                
                // 識別章節和主題
                const chapterPattern = /(第[一二三四五六七八九十]+[章節]|Chapter\s+\d+)/g;
                const chapters = text.match(chapterPattern) || [];
                
                // 識別可能的重要概念（大寫詞、專業術語）
                const importantConcepts = [];
                const lines = text.split('\n');
                lines.forEach(line => {
                    if (line.length > 10) {
                        // 查找可能的重要概念（包含特定關鍵詞）
                        const conceptKeywords = ['定義', '定理', '原理', '公式', '方法', '策略', '步驟', '原因', '影響', '優點', '缺點'];
                        conceptKeywords.forEach(keyword => {
                            if (line.includes(keyword)) {
                                importantConcepts.push(line.trim());
                            }
                        });
                    }
                });
                
                // 生成詳細摘要
                let summary = `<p><strong>文檔概述：</strong>${filename} 包含約 ${words.length} 個詞，${sentences.length} 個句子，${chapters.length} 個章節。</p>`;
                
                if (chapters.length > 0) {
                    summary += `<p><strong>主要章節：</strong>${chapters.slice(0, 5).join('、')}${chapters.length > 5 ? '等' : ''}</p>`;
                }
                
                summary += `<p><strong>核心內容：</strong>${sentences.slice(0, 5).join(' ')}...</p>`;
                
                if (importantConcepts.length > 0) {
                    summary += `<p><strong>重要概念：</strong><ul>`;
                    importantConcepts.slice(0, 5).forEach(concept => {
                        summary += `<li>${concept.substring(0, 100)}${concept.length > 100 ? '...' : ''}</li>`;
                    });
                    summary += `</ul></p>`;
                }
                
                summary += `<p><strong>關鍵詞：</strong>${topWords.join('、')}</p>`;
                summary += `<p><strong>學習建議：</strong>建議專注於理解文檔中的核心概念，特別注意${topWords.slice(0, 3).join('、')}等關鍵主題，並嘗試將新知識與已有知識聯繫起來。</p>`;
                
                return summary;
            }
            
            // 添加到已上傳列表
            function addToUploadedList(name, size, pages, summary) {
                const pdfItem = {
                    id: Date.now(),
                    name,
                    size,
                    pages,
                    summary,
                    uploadTime: new Date().toLocaleString()
                };
                
                uploadedPdfs.push(pdfItem);
                
                // 更新UI
                updateUploadedListUI();
            }
            
            // 更新已上傳列表UI
            function updateUploadedListUI() {
                if (uploadedPdfs.length === 0) {
                    uploadedPdfList.innerHTML = '<p style="text-align:center;color:var(--text-secondary);">尚未上傳任何PDF文件</p>';
                    return;
                }
                
                let html = '<h4>已上傳的文檔</h4>';
                uploadedPdfs.forEach(pdf => {
                    html += `
                        <div class="pdf-item">
                            <div class="pdf-item-info">
                                <span class="pdf-item-name">${pdf.name}</span>
                                <span style="color:var(--text-secondary);font-size:0.8rem;">
                                    ${formatFileSize(pdf.size)} · ${pdf.pages}頁
                                </span>
                            </div>
                            <div class="pdf-item-actions">
                                <div class="action-btn" onclick="viewPdfSummary(${pdf.id})">查看摘要</div>
                                <div class="action-btn" onclick="deletePdf(${pdf.id})">刪除</div>
                            </div>
                        </div>
                    `;
                });
                
                uploadedPdfList.innerHTML = html;
            }
            
            // 初始化上傳列表
            updateUploadedListUI();
        }
        
        // 查看PDF摘要
        function viewPdfSummary(id) {
            const pdf = uploadedPdfs.find(p => p.id === id);
            if (pdf) {
                const pdfSummaryContent = document.getElementById('pdfSummaryContent');
                pdfSummaryContent.innerHTML = pdf.summary;
                
                // 顯示預覽區域
                document.getElementById('pdfPreview').style.display = 'block';
                
                // 滾動到PDF區域
                document.getElementById('pdfPreview').scrollIntoView({ behavior: 'smooth' });
            }
        }
        
        // 刪除PDF - 修復版
        function deletePdf(id) {
            // 找到要刪除的PDF索引
            const index = uploadedPdfs.findIndex(p => p.id === id);
            if (index !== -1) {
                // 從數組中刪除
                uploadedPdfs.splice(index, 1);
                
                // 更新UI
                updateUploadedListUI();
                
                // 如果刪除的是當前PDF，清空預覽
                if (uploadedPdfs.length === 0) {
                    document.getElementById('pdfPreview').style.display = 'none';
                    currentPdfText = '';
                }
                
                // 顯示刪除成功消息
                showNotification('PDF文件已成功刪除', 'success');
            } else {
                showNotification('刪除失敗：找不到指定的PDF文件', 'error');
            }
        }
        
        // 顯示通知
        function showNotification(message, type) {
            // 創建通知元素
            const notification = document.createElement('div');
            notification.textContent = message;
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.padding = '15px 20px';
            notification.style.borderRadius = '5px';
            notification.style.zIndex = '10000';
            notification.style.fontWeight = '500';
            notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
            
            if (type === 'success') {
                notification.style.backgroundColor = 'var(--success)';
                notification.style.color = 'white';
            } else {
                notification.style.backgroundColor = 'var(--danger)';
                notification.style.color = 'white';
            }
            
            // 添加到頁面
            document.body.appendChild(notification);
            
            // 3秒後自動移除
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 3000);
        }
        
        // 設置聊天功能
        function setupChat() {
            const chatInput = document.getElementById('chatInput');
            const sendMessageBtn = document.getElementById('sendMessageBtn');
            const chatContainer = document.getElementById('chatContainer');
            
            // 發送消息
            function sendMessage() {
                const message = chatInput.value.trim();
                if (message === '') return;
                
                // 添加用戶消息
                addUserMessage(message);
                
                // 清空輸入框
                chatInput.value = '';
                
                // 處理AI回應
                setTimeout(() => {
                    processUserMessage(message);
                }, 500);
            }
            
            // 添加用戶消息
            function addUserMessage(message) {
                const userMessage = document.createElement('div');
                userMessage.classList.add('message', 'user-message');
                userMessage.textContent = message;
                chatContainer.appendChild(userMessage);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // 添加AI消息
            function addAIMessage(message) {
                const aiMessage = document.createElement('div');
                aiMessage.classList.add('message', 'ai-message');
                aiMessage.innerHTML = message;
                chatContainer.appendChild(aiMessage);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // 處理用戶消息
            function processUserMessage(message) {
                let response = '';
                
                // 檢查是否為PDF相關問題
                if (currentPdfText && isPdfRelatedQuestion(message)) {
                    response = answerPdfQuestion(message);
                } 
                // 檢查知識庫
                else {
                    response = findAnswerInKnowledgeBase(message);
                }
                
                // 如果沒有找到答案，使用默認回應
                if (!response) {
                    response = aiResponses[currentPersonality].unknown;
                }
                
                // 添加AI回應
                addAIMessage(response);
            }
            
            // 檢查是否為PDF相關問題
            function isPdfRelatedQuestion(question) {
                const pdfKeywords = ['pdf', '文檔', '文件', '內容', '總結', '摘要', '重點'];
                return pdfKeywords.some(keyword => question.toLowerCase().includes(keyword));
            }
            
            // 回答PDF相關問題
            function answerPdfQuestion(question) {
                if (!currentPdfText) {
                    return '目前沒有上傳的PDF文檔。請先上傳一個PDF文件，然後再詢問相關問題。';
                }
                
                // 簡單的關鍵詞匹配
                const keywords = question.toLowerCase().split(' ');
                let foundSentences = [];
                
                // 在PDF文本中查找相關句子
                const sentences = currentPdfText.split(/[.!?]+/);
                sentences.forEach(sentence => {
                    if (keywords.some(keyword => 
                        sentence.toLowerCase().includes(keyword) && 
                        keyword.length > 2)) {
                        foundSentences.push(sentence.trim());
                    }
                });
                
                if (foundSentences.length > 0) {
                    return `根據文檔內容，我找到以下相關信息：<br><br>${foundSentences.slice(0, 3).join('<br><br>')}`;
                } else {
                    return '在文檔中沒有找到與您的問題直接相關的內容。您可以嘗試詢問更一般的問題，或上傳其他相關文檔。';
                }
            }
            
            // 在知識庫中查找答案
            function findAnswerInKnowledgeBase(question) {
                // 遍歷所有學科
                for (const subject in knowledgeBase) {
                    // 檢查問題是否包含學科關鍵詞
                    if (question.toLowerCase().includes(subject.toLowerCase())) {
                        // 在該學科中查找具體問題
                        for (const q in knowledgeBase[subject]) {
                            if (question.toLowerCase().includes(q.toLowerCase()) || 
                                q.toLowerCase().includes(question.toLowerCase())) {
                                return knowledgeBase[subject][q];
                            }
                        }
                        
                        // 如果沒有找到具體問題，返回學科介紹
                        return `關於${subject}，我可以回答以下問題：<br><br>` + 
                               Object.keys(knowledgeBase[subject]).map(q => `• ${q}`).join('<br>');
                    }
                }
                
                // 如果沒有找到學科，嘗試直接匹配問題
                for (const subject in knowledgeBase) {
                    for (const q in knowledgeBase[subject]) {
                        if (question.toLowerCase().includes(q.toLowerCase()) || 
                            q.toLowerCase().includes(question.toLowerCase())) {
                            return knowledgeBase[subject][q];
                        }
                    }
                }
                
                return null;
            }
            
            // 事件監聽
            sendMessageBtn.addEventListener('click', sendMessage);
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        }
        
        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            createStars();
            setupModals();
            setupForms();
            setupNavigator();
            setupBioPlanetXR();
            setupAIAssistant();
        });
    </script>
</body>
</html>
